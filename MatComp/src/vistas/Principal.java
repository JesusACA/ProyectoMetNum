/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author leteo
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    JPanel[] paneles;
    int[][] aMult;
    int[][] bMult;
    int[][] cMult;

    public Principal() {
        initComponents();
        this.setLocationRelativeTo(null);
        paneles = new JPanel[this.jPanel1.getComponentCount() - 2];
        for (int i = 0; i < paneles.length; i++) {
            paneles[i] = (JPanel) this.jPanel1.getComponent(i + 2);
        }
        for (int i = 0; i < paneles.length; i++) {
            if (i != this.jList1.getSelectedIndex()) {
                this.paneles[i].setVisible(false);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        pnlMultiplicacion = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cbxF1 = new javax.swing.JComboBox<>();
        cbxC1 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMA = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cbxF2 = new javax.swing.JComboBox<>();
        cbxC2 = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMB = new javax.swing.JTable();
        btnMultiplicacion = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblMC = new javax.swing.JTable();
        pnlEliGauss = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        cbxEliNE = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblEliE = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblEliB = new javax.swing.JTable();
        btnComprobacionEliGaus = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblEcuaciones = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        btnRealizarEliGaus = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblResultados = new javax.swing.JTable();
        pnlJordan = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel16 = new javax.swing.JLabel();
        cbxJordCE = new javax.swing.JComboBox<>();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblJordanE = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblJordanB = new javax.swing.JTable();
        btnComprobacionJordan = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblEcuacionesJordan = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        btnRealizarJordan = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        tblResultadosJordan = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        tblJordanR = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        pnlInversa = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel23 = new javax.swing.JLabel();
        cbxInversaCE = new javax.swing.JComboBox<>();
        jScrollPane14 = new javax.swing.JScrollPane();
        tblInversaE = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        tblInversaB = new javax.swing.JTable();
        btnComprobacionInversa = new javax.swing.JButton();
        jScrollPane16 = new javax.swing.JScrollPane();
        tblEcuacionesInversa = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        btnRealizarInversa = new javax.swing.JButton();
        jScrollPane17 = new javax.swing.JScrollPane();
        tblResultadosInversa = new javax.swing.JTable();
        jScrollPane18 = new javax.swing.JScrollPane();
        tblInversaR = new javax.swing.JTable();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane19 = new javax.swing.JScrollPane();
        tblInversaR2 = new javax.swing.JTable();
        jLabel28 = new javax.swing.JLabel();
        pnlSeidel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel29 = new javax.swing.JLabel();
        cbxSeidelCE = new javax.swing.JComboBox<>();
        jScrollPane20 = new javax.swing.JScrollPane();
        tblSeidelE = new javax.swing.JTable();
        jScrollPane21 = new javax.swing.JScrollPane();
        tblSeidelB = new javax.swing.JTable();
        btnComprobacionSeidel = new javax.swing.JButton();
        jScrollPane22 = new javax.swing.JScrollPane();
        tblEcuacionesSeidel = new javax.swing.JTable();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        btnRealizarSeidel = new javax.swing.JButton();
        jScrollPane24 = new javax.swing.JScrollPane();
        tblIteraciones = new javax.swing.JTable();
        jLabel32 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        pnlMinimosCuadrados = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel33 = new javax.swing.JLabel();
        txtFilasMin = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        txtC1Min = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        txtC1Min1 = new javax.swing.JTextField();
        btnLlenarMin = new javax.swing.JButton();
        jScrollPane23 = new javax.swing.JScrollPane();
        tblMinimos = new javax.swing.JTable();
        btnOperacionMin = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        lblMMin = new javax.swing.JLabel();
        lblBMin = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        txtValorBusqueda = new javax.swing.JTextField();
        btnBusquedaMin = new javax.swing.JButton();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        pnlSecante = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1040, 630));

        jPanel1.setBackground(new java.awt.Color(37, 45, 68));
        jPanel1.setPreferredSize(new java.awt.Dimension(1028, 600));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(254, 254, 254));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Calculadora de metodos numericos computacionales");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 21, 1000, -1));

        jList1.setBackground(new java.awt.Color(37, 45, 68));
        jList1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jList1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jList1.setForeground(new java.awt.Color(254, 254, 254));
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Multiplicación de matrices", "Eliminación de Gauss", "Gauss Jordan", "Matriz inversa", "Gauss Seidel", "Minimos cuadrados", "Secante" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 77, 256, 511));

        pnlMultiplicacion.setBackground(new java.awt.Color(37, 45, 68));
        pnlMultiplicacion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMultiplicacion.setPreferredSize(new java.awt.Dimension(738, 511));
        pnlMultiplicacion.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlMultiplicacionComponentShown(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(254, 254, 254));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Multiplicación de matrices");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Seleccione dimesiones de la primer matriz:");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Seleccione dimesiones de la segunda matriz:");

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Filas:");

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Columnas:");

        cbxF1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cbxF1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        cbxF1.setPreferredSize(new java.awt.Dimension(67, 25));
        cbxF1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxF1ItemStateChanged(evt);
            }
        });

        cbxC1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cbxC1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        cbxC1.setPreferredSize(new java.awt.Dimension(67, 25));
        cbxC1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxC1ItemStateChanged(evt);
            }
        });

        tblMA.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tblMA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblMA.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblMA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblMAKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(tblMA);

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Columnas:");

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Filas:");

        cbxF2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cbxF2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        cbxF2.setPreferredSize(new java.awt.Dimension(67, 25));
        cbxF2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxF2ItemStateChanged(evt);
            }
        });

        cbxC2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cbxC2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        cbxC2.setPreferredSize(new java.awt.Dimension(67, 25));
        cbxC2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxC2ItemStateChanged(evt);
            }
        });

        tblMB.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tblMB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblMB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblMB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblMBKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(tblMB);

        btnMultiplicacion.setText("Realizar operación");
        btnMultiplicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultiplicacionActionPerformed(evt);
            }
        });

        tblMC.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tblMC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblMC.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(tblMC);

        javax.swing.GroupLayout pnlMultiplicacionLayout = new javax.swing.GroupLayout(pnlMultiplicacion);
        pnlMultiplicacion.setLayout(pnlMultiplicacionLayout);
        pnlMultiplicacionLayout.setHorizontalGroup(
            pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                        .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(cbxF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbxC1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(btnMultiplicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMultiplicacionLayout.createSequentialGroup()
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11)))
                    .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                        .addComponent(cbxF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149)
                        .addComponent(cbxC2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMultiplicacionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(244, 244, 244))
        );
        pnlMultiplicacionLayout.setVerticalGroup(
            pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxC1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxC2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(btnMultiplicacion)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(pnlMultiplicacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        pnlEliGauss.setBackground(new java.awt.Color(37, 45, 68));
        pnlEliGauss.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlEliGauss.setPreferredSize(new java.awt.Dimension(738, 511));
        pnlEliGauss.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlEliGaussComponentShown(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(254, 254, 254));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Eliminación de Gauss");

        jLabel13.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Cantidad de ecuaciones:");

        cbxEliNE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3" }));
        cbxEliNE.setPreferredSize(new java.awt.Dimension(208, 20));
        cbxEliNE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxEliNEItemStateChanged(evt);
            }
        });

        tblEliE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(tblEliE);

        tblEliB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblEliB);

        btnComprobacionEliGaus.setText("Comprobar ecuaciones");
        btnComprobacionEliGaus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprobacionEliGausActionPerformed(evt);
            }
        });

        tblEcuaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ecuaciones"
            }
        ));
        jScrollPane8.setViewportView(tblEcuaciones);

        jLabel14.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Matriz resultante:");

        jLabel15.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Favor de escribir los 0");

        btnRealizarEliGaus.setText("Realizar operación");
        btnRealizarEliGaus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarEliGausActionPerformed(evt);
            }
        });

        tblResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "x"
            }
        ));
        jScrollPane7.setViewportView(tblResultados);

        javax.swing.GroupLayout pnlEliGaussLayout = new javax.swing.GroupLayout(pnlEliGauss);
        pnlEliGauss.setLayout(pnlEliGaussLayout);
        pnlEliGaussLayout.setHorizontalGroup(
            pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEliGaussLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlEliGaussLayout.createSequentialGroup()
                        .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxEliNE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlEliGaussLayout.createSequentialGroup()
                        .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEliGaussLayout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(260, 260, 260))
                            .addGroup(pnlEliGaussLayout.createSequentialGroup()
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                                .addComponent(btnComprobacionEliGaus)
                                .addGap(54, 54, 54)))
                        .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRealizarEliGaus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(pnlEliGaussLayout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlEliGaussLayout.setVerticalGroup(
            pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEliGaussLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxEliNE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlEliGaussLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEliGaussLayout.createSequentialGroup()
                                .addComponent(btnComprobacionEliGaus)
                                .addGap(42, 42, 42))))
                    .addGroup(pnlEliGaussLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnRealizarEliGaus)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(354, Short.MAX_VALUE))
        );

        jPanel1.add(pnlEliGauss, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        pnlJordan.setBackground(new java.awt.Color(37, 45, 68));
        pnlJordan.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlJordan.setPreferredSize(new java.awt.Dimension(738, 511));
        pnlJordan.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlJordanComponentShown(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Gauss Jordan");
        jLabel6.setToolTipText("");

        jLabel16.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Cantidad de ecuaciones:");

        cbxJordCE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3" }));
        cbxJordCE.setPreferredSize(new java.awt.Dimension(208, 20));
        cbxJordCE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxJordCEItemStateChanged(evt);
            }
        });

        tblJordanE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane9.setViewportView(tblJordanE);

        tblJordanB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(tblJordanB);

        btnComprobacionJordan.setText("Comprobar ecuaciones");
        btnComprobacionJordan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprobacionJordanActionPerformed(evt);
            }
        });

        tblEcuacionesJordan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ecuaciones"
            }
        ));
        jScrollPane11.setViewportView(tblEcuacionesJordan);

        jLabel17.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Matriz resultante:");

        jLabel18.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Favor de escribir los 0");

        btnRealizarJordan.setText("Realizar operación");
        btnRealizarJordan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarJordanActionPerformed(evt);
            }
        });

        tblResultadosJordan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "x"
            }
        ));
        jScrollPane12.setViewportView(tblResultadosJordan);

        tblJordanR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane13.setViewportView(tblJordanR);

        jLabel19.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Matriz reducida:");

        jLabel20.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Valores resultantes:");

        javax.swing.GroupLayout pnlJordanLayout = new javax.swing.GroupLayout(pnlJordan);
        pnlJordan.setLayout(pnlJordanLayout);
        pnlJordanLayout.setHorizontalGroup(
            pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
            .addGroup(pnlJordanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlJordanLayout.createSequentialGroup()
                        .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlJordanLayout.createSequentialGroup()
                                .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(cbxJordCE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlJordanLayout.createSequentialGroup()
                                .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pnlJordanLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnComprobacionJordan))
                                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(306, 306, 306)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlJordanLayout.createSequentialGroup()
                        .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlJordanLayout.createSequentialGroup()
                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlJordanLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnRealizarJordan, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlJordanLayout.createSequentialGroup()
                                .addGap(224, 224, 224)
                                .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
        );
        pnlJordanLayout.setVerticalGroup(
            pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlJordanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxJordCE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17))
                .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlJordanLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlJordanLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(btnComprobacionJordan)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRealizarJordan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(115, Short.MAX_VALUE))
        );

        jPanel1.add(pnlJordan, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        pnlInversa.setBackground(new java.awt.Color(37, 45, 68));
        pnlInversa.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlInversa.setPreferredSize(new java.awt.Dimension(738, 511));
        pnlInversa.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlInversaComponentShown(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Método de matriz inversa");

        jLabel23.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Cantidad de ecuaciones:");

        cbxInversaCE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3" }));
        cbxInversaCE.setPreferredSize(new java.awt.Dimension(208, 20));
        cbxInversaCE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxInversaCEItemStateChanged(evt);
            }
        });

        tblInversaE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane14.setViewportView(tblInversaE);

        tblInversaB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane15.setViewportView(tblInversaB);

        btnComprobacionInversa.setText("Comprobar ecuaciones");
        btnComprobacionInversa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprobacionInversaActionPerformed(evt);
            }
        });

        tblEcuacionesInversa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ecuaciones"
            }
        ));
        jScrollPane16.setViewportView(tblEcuacionesInversa);

        jLabel24.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("Matriz resultante:");

        jLabel25.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Favor de escribir los 0");

        btnRealizarInversa.setText("Realizar operación");
        btnRealizarInversa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarInversaActionPerformed(evt);
            }
        });

        tblResultadosInversa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "x"
            }
        ));
        jScrollPane17.setViewportView(tblResultadosInversa);

        tblInversaR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane18.setViewportView(tblInversaR);

        jLabel26.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("Matriz reducida:");

        jLabel27.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Valores resultantes:");

        tblInversaR2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane19.setViewportView(tblInversaR2);

        jLabel28.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Matriz resultante de la inversa:");

        javax.swing.GroupLayout pnlInversaLayout = new javax.swing.GroupLayout(pnlInversa);
        pnlInversa.setLayout(pnlInversaLayout);
        pnlInversaLayout.setHorizontalGroup(
            pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
            .addGroup(pnlInversaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInversaLayout.createSequentialGroup()
                        .addGroup(pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlInversaLayout.createSequentialGroup()
                                .addGroup(pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxInversaCE, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlInversaLayout.createSequentialGroup()
                                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnComprobacionInversa)
                                .addGap(46, 46, 46)
                                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlInversaLayout.createSequentialGroup()
                                .addGroup(pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnlInversaLayout.createSequentialGroup()
                                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(pnlInversaLayout.createSequentialGroup()
                                        .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnRealizarInversa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)))
                .addContainerGap())
        );
        pnlInversaLayout.setVerticalGroup(
            pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInversaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxInversaCE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel24))
                .addGroup(pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInversaLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlInversaLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(btnComprobacionInversa)))
                .addGroup(pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInversaLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnRealizarInversa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInversaLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlInversaLayout.createSequentialGroup()
                                .addGroup(pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel28))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(137, Short.MAX_VALUE))
        );

        jPanel1.add(pnlInversa, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        pnlSeidel.setBackground(new java.awt.Color(37, 45, 68));
        pnlSeidel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlSeidel.setPreferredSize(new java.awt.Dimension(738, 511));
        pnlSeidel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlSeidelComponentShown(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Gauss Seidel");

        jLabel29.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Cantidad de ecuaciones:");

        cbxSeidelCE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3" }));
        cbxSeidelCE.setPreferredSize(new java.awt.Dimension(208, 20));
        cbxSeidelCE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxSeidelCEItemStateChanged(evt);
            }
        });

        tblSeidelE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane20.setViewportView(tblSeidelE);

        tblSeidelB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane21.setViewportView(tblSeidelB);

        btnComprobacionSeidel.setText("Comprobar ecuaciones");
        btnComprobacionSeidel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprobacionSeidelActionPerformed(evt);
            }
        });

        tblEcuacionesSeidel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ecuaciones"
            }
        ));
        jScrollPane22.setViewportView(tblEcuacionesSeidel);

        jLabel30.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("Matriz resultante:");

        jLabel31.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(255, 255, 255));
        jLabel31.setText("Favor de escribir los 0");

        btnRealizarSeidel.setText("Realizar operación");
        btnRealizarSeidel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarSeidelActionPerformed(evt);
            }
        });

        tblIteraciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane24.setViewportView(tblIteraciones);

        jLabel32.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setText("Tabla de iteraciones");

        jLabel34.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 255, 255));
        jLabel34.setText("Se manejará un error de 0.01%");

        javax.swing.GroupLayout pnlSeidelLayout = new javax.swing.GroupLayout(pnlSeidel);
        pnlSeidel.setLayout(pnlSeidelLayout);
        pnlSeidelLayout.setHorizontalGroup(
            pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
            .addGroup(pnlSeidelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSeidelLayout.createSequentialGroup()
                        .addGroup(pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlSeidelLayout.createSequentialGroup()
                                .addGroup(pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxSeidelCE, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlSeidelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlSeidelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel34)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(pnlSeidelLayout.createSequentialGroup()
                                .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlSeidelLayout.createSequentialGroup()
                                        .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnRealizarSeidel, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlSeidelLayout.createSequentialGroup()
                                        .addComponent(btnComprobacionSeidel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)))
                .addContainerGap())
        );
        pnlSeidelLayout.setVerticalGroup(
            pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSeidelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxSeidelCE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlSeidelLayout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlSeidelLayout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addGroup(pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlSeidelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlSeidelLayout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(btnComprobacionSeidel))))
                    .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSeidelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRealizarSeidel))
                    .addGroup(pnlSeidelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel32)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane24, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(pnlSeidel, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        pnlMinimosCuadrados.setBackground(new java.awt.Color(37, 45, 68));
        pnlMinimosCuadrados.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMinimosCuadrados.setPreferredSize(new java.awt.Dimension(738, 511));

        jLabel21.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Método de minimos cuadrados");

        jLabel33.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setText("Cantidad de filas:");

        jLabel36.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("Nombre columna 1:");

        jLabel37.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText("Nombre columna 2:");

        btnLlenarMin.setText("Llenar tabla");

        tblMinimos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane23.setViewportView(tblMinimos);

        btnOperacionMin.setText("Realizar operación");

        jLabel35.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("Valor de m:");

        jLabel38.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(255, 255, 255));
        jLabel38.setText("Valor de b:");

        lblMMin.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblMMin.setForeground(new java.awt.Color(255, 255, 255));
        lblMMin.setText("M");

        lblBMin.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblBMin.setForeground(new java.awt.Color(255, 255, 255));
        lblBMin.setText("B");

        jLabel39.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(255, 255, 255));
        jLabel39.setText("Valor de X que desea buscar:");

        btnBusquedaMin.setText("Realizar busqueda");

        jLabel40.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setText("La Y en X es de:");

        jLabel41.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(255, 255, 255));
        jLabel41.setText("Y");

        javax.swing.GroupLayout pnlMinimosCuadradosLayout = new javax.swing.GroupLayout(pnlMinimosCuadrados);
        pnlMinimosCuadrados.setLayout(pnlMinimosCuadradosLayout);
        pnlMinimosCuadradosLayout.setHorizontalGroup(
            pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
            .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMinimosCuadradosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnLlenarMin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlMinimosCuadradosLayout.createSequentialGroup()
                            .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtFilasMin))
                            .addGap(18, 18, 18)
                            .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel36)
                                .addComponent(txtC1Min, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtC1Min1))))
                    .addGroup(pnlMinimosCuadradosLayout.createSequentialGroup()
                        .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel39, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlMinimosCuadradosLayout.createSequentialGroup()
                                .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel38)
                                    .addComponent(jLabel35))
                                .addGap(26, 26, 26)
                                .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMMin)
                                    .addComponent(lblBMin))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtValorBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBusquedaMin))
                    .addGroup(pnlMinimosCuadradosLayout.createSequentialGroup()
                        .addComponent(jLabel40)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel41)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnOperacionMin, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                    .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlMinimosCuadradosLayout.setVerticalGroup(
            pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMinimosCuadradosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMinimosCuadradosLayout.createSequentialGroup()
                        .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel33)
                            .addComponent(jLabel36)
                            .addComponent(jLabel37))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC1Min1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtC1Min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFilasMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLlenarMin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel35)
                            .addComponent(lblMMin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel38)
                            .addComponent(lblBMin))
                        .addGap(32, 32, 32)
                        .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel39)
                            .addComponent(txtValorBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBusquedaMin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMinimosCuadradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel40)
                            .addComponent(jLabel41)))
                    .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOperacionMin)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        jPanel1.add(pnlMinimosCuadrados, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        pnlSecante.setBackground(new java.awt.Color(37, 45, 68));
        pnlSecante.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlSecante.setPreferredSize(new java.awt.Dimension(738, 511));

        jLabel22.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Método de Secante");

        javax.swing.GroupLayout pnlSecanteLayout = new javax.swing.GroupLayout(pnlSecante);
        pnlSecante.setLayout(pnlSecanteLayout);
        pnlSecanteLayout.setHorizontalGroup(
            pnlSecanteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
        );
        pnlSecanteLayout.setVerticalGroup(
            pnlSecanteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSecanteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22)
                .addContainerGap(464, Short.MAX_VALUE))
        );

        jPanel1.add(pnlSecante, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if (this.jList1.getSelectedIndex() >= 0 && this.jList1.getSelectedIndex() < paneles.length) {
            for (int i = 0; i < paneles.length; i++) {
                if (i != this.jList1.getSelectedIndex()) {
                    this.paneles[i].setVisible(false);
                }
            }
            paneles[this.jList1.getSelectedIndex()].setVisible(true);
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void cbxF1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxF1ItemStateChanged
        DefaultTableModel modelo = (DefaultTableModel) this.tblMA.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblMA.setModel(modelo);
        DefaultTableModel modelo3 = (DefaultTableModel) this.tblMC.getModel();

        modelo3.setColumnCount(0);
        modelo3.setRowCount(0);

        if (Integer.parseInt(cbxC1.getSelectedItem().toString()) == Integer.parseInt(cbxF2.getSelectedItem().toString())) {
            for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
                modelo3.addRow(new Object[]{0});
            }
            for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
                modelo3.addColumn("");
            }
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(true);
        } else {
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(false);
        }
        for (int i = 0; i < this.tblMA.getRowCount(); i++) {
            for (int j = 0; j < this.tblMA.getColumnCount(); j++) {
                tblMA.setValueAt(0, i, j);
            }
        }
    }//GEN-LAST:event_cbxF1ItemStateChanged

    private void pnlMultiplicacionComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlMultiplicacionComponentShown
        DefaultTableModel modelo1 = (DefaultTableModel) this.tblMA.getModel();
        modelo1.setRowCount(0);
        modelo1.setColumnCount(0);
        for (int i = 0; i <= this.cbxC1.getSelectedIndex(); i++) {
            modelo1.addColumn("");
        }
        for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
            modelo1.addRow(new Object[]{});
        }
        this.tblMA.setModel(modelo1);
        DefaultTableModel modelo2 = (DefaultTableModel) this.tblMB.getModel();
        modelo2.setRowCount(0);
        modelo2.setColumnCount(0);
        for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
            modelo2.addColumn("");
        }
        for (int i = 0; i <= this.cbxF2.getSelectedIndex(); i++) {
            modelo2.addRow(new Object[]{});
        }
        this.tblMB.setModel(modelo2);

        DefaultTableModel modelo3 = (DefaultTableModel) this.tblMC.getModel();

        modelo3.setColumnCount(0);
        modelo3.setRowCount(0);

        if (Integer.parseInt(cbxC1.getSelectedItem().toString()) == Integer.parseInt(cbxF2.getSelectedItem().toString())) {
            for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
                modelo3.addRow(new Object[]{});
            }
            for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
                modelo3.addColumn("");
            }
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(true);
        } else {
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(false);
        }
        for (int i = 0; i < this.tblMA.getRowCount(); i++) {
            for (int j = 0; j < this.tblMA.getColumnCount(); j++) {
                tblMA.setValueAt(0, i, j);
            }
        }
        for (int i = 0; i < this.tblMB.getRowCount(); i++) {
            for (int j = 0; j < this.tblMB.getColumnCount(); j++) {
                tblMB.setValueAt(0, i, j);
            }
        }
    }//GEN-LAST:event_pnlMultiplicacionComponentShown

    private void cbxC1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxC1ItemStateChanged
        DefaultTableModel modelo = (DefaultTableModel) this.tblMA.getModel();
        modelo.setColumnCount(0);
        for (int i = 0; i <= this.cbxC1.getSelectedIndex(); i++) {
            modelo.addColumn("");
        }
        this.tblMA.setModel(modelo);

        DefaultTableModel modelo3 = (DefaultTableModel) this.tblMC.getModel();

        modelo3.setColumnCount(0);
        modelo3.setRowCount(0);

        if (Integer.parseInt(cbxC1.getSelectedItem().toString()) == Integer.parseInt(cbxF2.getSelectedItem().toString())) {
            for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
                modelo3.addRow(new Object[]{});
            }
            for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
                modelo3.addColumn("");
            }
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(true);
        } else {
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(false);
        }
        for (int i = 0; i < this.tblMA.getRowCount(); i++) {
            for (int j = 0; j < this.tblMA.getColumnCount(); j++) {
                tblMA.setValueAt(0, i, j);
            }
        }
    }//GEN-LAST:event_cbxC1ItemStateChanged

    private void cbxF2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxF2ItemStateChanged
        DefaultTableModel modelo = (DefaultTableModel) this.tblMB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i <= this.cbxF2.getSelectedIndex(); i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblMB.setModel(modelo);

        DefaultTableModel modelo3 = (DefaultTableModel) this.tblMC.getModel();

        modelo3.setColumnCount(0);
        modelo3.setRowCount(0);

        if (Integer.parseInt(cbxC1.getSelectedItem().toString()) == Integer.parseInt(cbxF2.getSelectedItem().toString())) {
            for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
                modelo3.addRow(new Object[]{});
            }
            for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
                modelo3.addColumn("");
            }
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(true);
        } else {
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(false);
        }
        for (int i = 0; i < this.tblMB.getRowCount(); i++) {
            for (int j = 0; j < this.tblMB.getColumnCount(); j++) {
                tblMB.setValueAt(0, i, j);
            }
        }
    }//GEN-LAST:event_cbxF2ItemStateChanged

    private void cbxC2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxC2ItemStateChanged
        DefaultTableModel modelo = (DefaultTableModel) this.tblMB.getModel();
        modelo.setColumnCount(0);
        for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
            modelo.addColumn("");
        }
        this.tblMB.setModel(modelo);

        DefaultTableModel modelo3 = (DefaultTableModel) this.tblMC.getModel();

        modelo3.setColumnCount(0);
        modelo3.setRowCount(0);

        if (Integer.parseInt(cbxC1.getSelectedItem().toString()) == Integer.parseInt(cbxF2.getSelectedItem().toString())) {
            for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
                modelo3.addRow(new Object[]{});
            }
            for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
                modelo3.addColumn("");
            }
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(true);
        } else {
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(false);
        }
        for (int i = 0; i < this.tblMB.getRowCount(); i++) {
            for (int j = 0; j < this.tblMB.getColumnCount(); j++) {
                tblMB.setValueAt(0, i, j);
            }
        }
    }//GEN-LAST:event_cbxC2ItemStateChanged

    private void btnMultiplicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultiplicacionActionPerformed
        if (!(this.tblMA.isEditing() || this.tblMB.isEditing())) {
            this.aMult = new int[this.cbxF1.getSelectedIndex() + 1][this.cbxC1.getSelectedIndex() + 1];
            this.bMult = new int[this.cbxF2.getSelectedIndex() + 1][this.cbxC2.getSelectedIndex() + 1];
            this.cMult = new int[this.cbxF1.getSelectedIndex() + 1][this.cbxC2.getSelectedIndex() + 1];
            for (int i = 0; i < this.cbxF1.getSelectedIndex() + 1; i++) {
                for (int j = 0; j < this.cbxC1.getSelectedIndex() + 1; j++) {
                    this.aMult[i][j] = Integer.parseInt(this.tblMA.getValueAt(i, j).toString());
                }
            }
            for (int i = 0; i < this.cbxF2.getSelectedIndex() + 1; i++) {
                for (int j = 0; j < this.cbxC2.getSelectedIndex() + 1; j++) {
                    this.bMult[i][j] = Integer.parseInt(this.tblMB.getValueAt(i, j).toString());
                }
            }
            for (int i = 0; i < this.cbxF1.getSelectedIndex() + 1; i++) {
                for (int j = 0; j < this.cbxC2.getSelectedIndex() + 1; j++) {
                    cMult[i][j] = 0;
                    for (int k = 0; k < this.cbxC1.getSelectedIndex() + 1; k++) {
                        cMult[i][j] += aMult[i][k] * bMult[k][j];
                    }
                }
            }
            for (int i = 0; i < this.cbxF1.getSelectedIndex() + 1; i++) {
                for (int j = 0; j < this.cbxC2.getSelectedIndex() + 1; j++) {
                    this.tblMC.setValueAt(cMult[i][j], i, j);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Está siendo editada la tabla, por favor presione enter", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnMultiplicacionActionPerformed

    private void tblMAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblMAKeyTyped
        if (this.tblMA.isEditing() || this.tblMB.isEditing()) {
            this.btnMultiplicacion.setEnabled(false);
        } else {
            this.btnMultiplicacion.setEnabled(true);
        }
    }//GEN-LAST:event_tblMAKeyTyped

    private void tblMBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblMBKeyTyped
        if (this.tblMA.isEditing() || this.tblMB.isEditing()) {
            this.btnMultiplicacion.setEnabled(false);
        } else {
            this.btnMultiplicacion.setEnabled(true);
        }
    }//GEN-LAST:event_tblMBKeyTyped

    private void pnlEliGaussComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlEliGaussComponentShown
        int valor = Integer.parseInt(this.cbxEliNE.getSelectedItem().toString());
        DefaultTableModel modelo = (DefaultTableModel) this.tblEliE.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblEliE.setModel(modelo);
        modelo = (DefaultTableModel) this.tblEliB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        for (int i = 0; i < this.tblEliE.getRowCount(); i++) {
            for (int j = 0; j < this.tblEliE.getColumnCount(); j++) {
                this.tblEliE.setValueAt(0, i, j);
            }
        }
        modelo = (DefaultTableModel) this.tblEcuaciones.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblEcuaciones.setModel(modelo);

        modelo = (DefaultTableModel) this.tblResultados.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        for (int i = 0; i < valor; i++) {
            int letra = i + 120;
            modelo.addColumn((char) letra);
        }
        modelo.addColumn("Determinante");
        modelo.addRow(new Object[]{});
        this.tblResultados.setModel(modelo);

    }//GEN-LAST:event_pnlEliGaussComponentShown

    private void cbxEliNEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxEliNEItemStateChanged
        int valor = Integer.parseInt(this.cbxEliNE.getSelectedItem().toString());
        DefaultTableModel modelo = (DefaultTableModel) this.tblEliE.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblEliE.setModel(modelo);
        modelo = (DefaultTableModel) this.tblEliB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        for (int i = 0; i < this.tblEliE.getRowCount(); i++) {
            for (int j = 0; j < this.tblEliE.getColumnCount(); j++) {
                this.tblEliE.setValueAt(0, i, j);
            }
        }
        modelo = (DefaultTableModel) this.tblEcuaciones.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblEcuaciones.setModel(modelo);

        modelo = (DefaultTableModel) this.tblResultados.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        for (int i = 0; i < valor; i++) {
            int letra = i + 120;
            modelo.addColumn((char) letra);
        }
        modelo.addColumn("Determinante");
        modelo.addRow(new Object[]{});
        this.tblResultados.setModel(modelo);
    }//GEN-LAST:event_cbxEliNEItemStateChanged

    private void btnComprobacionEliGausActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprobacionEliGausActionPerformed
        if (this.tblEcuaciones.isEditing()) {
            JOptionPane.showMessageDialog(this.btnComprobacionEliGaus, "Está siendo editada la tabla de las ecuaciones", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            hacerMatriz(this.tblEcuaciones, this.tblEliE, this.tblEliB, this.cbxEliNE);
        }
    }//GEN-LAST:event_btnComprobacionEliGausActionPerformed

    private void btnRealizarEliGausActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarEliGausActionPerformed
        int valor = Integer.parseInt(this.cbxEliNE.getSelectedItem().toString());
        int n = valor - 1;
        double[][] a = new double[valor][valor];
        double[] b = new double[valor];
        double[] x = new double[n + 1];
        for (int i = 0; i < valor; i++) {
            for (int j = 0; j < valor; j++) {
                a[i][j] = Double.parseDouble(this.tblEliE.getValueAt(i, j).toString());
            }
        }
        for (int i = 0; i < valor; i++) {
            b[i] = Double.parseDouble(this.tblEliB.getValueAt(i, 0).toString());
        }
        int det = 1;
        for (int i = 0; i <= n - 1; i++) {
            det *= a[i][i];
            if (det == 0) {
                JOptionPane.showMessageDialog(this.tblResultados, "Hay un cero en la diagonal", "Resultado", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (int k = i + 1; k <= n; k++) {
                    for (int j = i + 1; j <= n; j++) {
                        a[k][j] = a[k][j] - a[k][i] * a[i][j] / a[i][i];
                    }
                    b[k] = b[k] - a[k][i] * b[i] / a[i][i];
                }
            }
        }
        det *= a[n][n];
        if (det == 0) {
            JOptionPane.showMessageDialog(this.tblResultados, "Hay un cero en la diagonal", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        } else {
            x[n] = b[n] / a[n][n];
            for (int i = n - 1; i >= 0; i--) {
                x[i] = b[i];
                for (int j = i + 1; j <= n; j++) {
                    x[i] -= a[i][j] * x[j];
                }
                x[i] /= a[i][i];
            }
        }
        for (int i = 0; i < x.length; i++) {
            this.tblResultados.setValueAt(x[i], 0, i);
        }
        this.tblResultados.setValueAt(det, 0, this.tblResultados.getColumnCount() - 1);
    }//GEN-LAST:event_btnRealizarEliGausActionPerformed

    private void cbxJordCEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxJordCEItemStateChanged
        int valor = Integer.parseInt(this.cbxJordCE.getSelectedItem().toString());
        DefaultTableModel modelo = (DefaultTableModel) this.tblJordanE.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblJordanE.setModel(modelo);
        modelo = (DefaultTableModel) this.tblJordanB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblJordanB.setModel(modelo);
        for (int i = 0; i < this.tblJordanE.getRowCount(); i++) {
            for (int j = 0; j < this.tblJordanE.getColumnCount(); j++) {
                this.tblJordanE.setValueAt(0, i, j);
            }
        }
        modelo = (DefaultTableModel) this.tblEcuacionesJordan.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblEcuacionesJordan.setModel(modelo);

        modelo = (DefaultTableModel) this.tblResultadosJordan.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        for (int i = 0; i < valor; i++) {
            int letra = i + 120;
            modelo.addColumn((char) letra);
        }
        modelo.addRow(new Object[]{});
        this.tblResultadosJordan.setModel(modelo);

        modelo = (DefaultTableModel) this.tblJordanR.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        modelo.addColumn("b");
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblJordanR.setModel(modelo);
    }//GEN-LAST:event_cbxJordCEItemStateChanged

    private void btnComprobacionJordanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprobacionJordanActionPerformed
        if (this.tblEcuacionesJordan.isEditing()) {
            JOptionPane.showMessageDialog(this.btnComprobacionEliGaus, "Está siendo editada la tabla de las ecuaciones", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            hacerMatriz(this.tblEcuacionesJordan, this.tblJordanE, this.tblJordanB, this.cbxJordCE);
        }
    }//GEN-LAST:event_btnComprobacionJordanActionPerformed

    private void btnRealizarJordanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarJordanActionPerformed
        int n = Integer.parseInt(this.cbxJordCE.getSelectedItem().toString());
        int flag = 0;
        double[][] matriz = new double[n][n + 1];
        this.llenarMatriz(matriz, n, this.tblJordanE, this.tblJordanB);
        flag = this.reducirMatriz(matriz, n);
        if (flag == 1) {
            flag = this.consistencia(matriz, n, flag);
        }
        this.imprimirMatriz(matriz, n, flag, this.tblResultadosJordan, this.tblJordanR);
    }//GEN-LAST:event_btnRealizarJordanActionPerformed

    private void pnlJordanComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlJordanComponentShown
        int valor = Integer.parseInt(this.cbxJordCE.getSelectedItem().toString());
        DefaultTableModel modelo = (DefaultTableModel) this.tblJordanE.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblJordanE.setModel(modelo);
        modelo = (DefaultTableModel) this.tblJordanB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblJordanB.setModel(modelo);
        for (int i = 0; i < this.tblJordanE.getRowCount(); i++) {
            for (int j = 0; j < this.tblJordanE.getColumnCount(); j++) {
                this.tblJordanE.setValueAt(0, i, j);
            }
        }
        modelo = (DefaultTableModel) this.tblEcuacionesJordan.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblEcuacionesJordan.setModel(modelo);

        modelo = (DefaultTableModel) this.tblResultadosJordan.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        for (int i = 0; i < valor; i++) {
            int letra = i + 120;
            modelo.addColumn((char) letra);
        }
        modelo.addRow(new Object[]{});
        this.tblResultadosJordan.setModel(modelo);

        modelo = (DefaultTableModel) this.tblJordanR.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        modelo.addColumn("b");
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblJordanR.setModel(modelo);
    }//GEN-LAST:event_pnlJordanComponentShown

    private void cbxInversaCEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxInversaCEItemStateChanged
        int valor = Integer.parseInt(this.cbxInversaCE.getSelectedItem().toString());
        DefaultTableModel modelo = (DefaultTableModel) this.tblInversaE.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblInversaE.setModel(modelo);
        modelo = (DefaultTableModel) this.tblInversaB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblInversaB.setModel(modelo);
        for (int i = 0; i < this.tblInversaE.getRowCount(); i++) {
            for (int j = 0; j < this.tblInversaE.getColumnCount(); j++) {
                this.tblInversaE.setValueAt(0, i, j);
            }
        }
        modelo = (DefaultTableModel) this.tblEcuacionesInversa.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblEcuacionesInversa.setModel(modelo);

        modelo = (DefaultTableModel) this.tblResultadosInversa.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        for (int i = 0; i < valor; i++) {
            int letra = i + 120;
            modelo.addColumn((char) letra);
        }
        modelo.addRow(new Object[]{});
        this.tblResultadosInversa.setModel(modelo);

        modelo = (DefaultTableModel) this.tblInversaR.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblInversaR.setModel(modelo);

        modelo = (DefaultTableModel) this.tblInversaR2.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblInversaR2.setModel(modelo);
    }//GEN-LAST:event_cbxInversaCEItemStateChanged

    private void btnComprobacionInversaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprobacionInversaActionPerformed
        if (this.tblEcuacionesInversa.isEditing()) {
            JOptionPane.showMessageDialog(this.btnComprobacionInversa, "Está siendo editada la tabla de las ecuaciones", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            hacerMatriz(this.tblEcuacionesInversa, this.tblInversaE, this.tblInversaB, this.cbxInversaCE);
        }
    }//GEN-LAST:event_btnComprobacionInversaActionPerformed

    private void btnRealizarInversaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarInversaActionPerformed
        int n = Integer.parseInt(this.cbxInversaCE.getSelectedItem().toString());
        int flag = 0;
        double[][] matriz = new double[n][n + n];
        this.llenarMatrizInversa(matriz, n, this.tblInversaE);
        flag = this.reducirInversa(matriz, n);
        if (flag == 1) {
            flag = this.consistencia(matriz, n, flag);
        }
        this.imprimirMatrizInversa(matriz, n, flag, this.tblResultadosInversa, this.tblInversaR, this.tblInversaR2);
    }//GEN-LAST:event_btnRealizarInversaActionPerformed

    private void pnlInversaComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlInversaComponentShown
        int valor = Integer.parseInt(this.cbxInversaCE.getSelectedItem().toString());
        DefaultTableModel modelo = (DefaultTableModel) this.tblInversaE.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblInversaE.setModel(modelo);
        modelo = (DefaultTableModel) this.tblInversaB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblInversaB.setModel(modelo);
        for (int i = 0; i < this.tblInversaE.getRowCount(); i++) {
            for (int j = 0; j < this.tblInversaE.getColumnCount(); j++) {
                this.tblInversaE.setValueAt(0, i, j);
            }
        }
        modelo = (DefaultTableModel) this.tblEcuacionesInversa.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblEcuacionesInversa.setModel(modelo);

        modelo = (DefaultTableModel) this.tblResultadosInversa.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        for (int i = 0; i < valor; i++) {
            int letra = i + 120;
            modelo.addColumn((char) letra);
        }
        modelo.addRow(new Object[]{});
        this.tblResultadosInversa.setModel(modelo);

        modelo = (DefaultTableModel) this.tblInversaR.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblInversaR.setModel(modelo);

        modelo = (DefaultTableModel) this.tblInversaR2.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblInversaR2.setModel(modelo);
    }//GEN-LAST:event_pnlInversaComponentShown

    private void cbxSeidelCEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxSeidelCEItemStateChanged
        int valor = Integer.parseInt(this.cbxSeidelCE.getSelectedItem().toString());
        DefaultTableModel modelo = (DefaultTableModel) this.tblSeidelE.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblSeidelE.setModel(modelo);
        modelo = (DefaultTableModel) this.tblSeidelB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblSeidelB.setModel(modelo);
        for (int i = 0; i < this.tblSeidelE.getRowCount(); i++) {
            for (int j = 0; j < this.tblSeidelE.getColumnCount(); j++) {
                this.tblSeidelE.setValueAt(0, i, j);
            }
        }
        modelo = (DefaultTableModel) this.tblEcuacionesSeidel.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblEcuacionesSeidel.setModel(modelo);

        modelo = (DefaultTableModel) this.tblIteraciones.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        modelo.addColumn("Iteración");
        for (int i = 0; i < valor; i++) {
            int letra = i + 120;
            modelo.addColumn((char) letra);
        }
        this.tblIteraciones.setModel(modelo);
    }//GEN-LAST:event_cbxSeidelCEItemStateChanged

    private void btnComprobacionSeidelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprobacionSeidelActionPerformed
        if (this.tblEcuacionesSeidel.isEditing()) {
            JOptionPane.showMessageDialog(this.btnComprobacionSeidel, "Está siendo editada la tabla de las ecuaciones", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            hacerMatriz(this.tblEcuacionesSeidel, this.tblSeidelE, this.tblSeidelB, this.cbxSeidelCE);
        }
    }//GEN-LAST:event_btnComprobacionSeidelActionPerformed

    private void btnRealizarSeidelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarSeidelActionPerformed
        int valor = Integer.parseInt(this.cbxSeidelCE.getSelectedItem().toString());
        DefaultTableModel modelo = (DefaultTableModel) this.tblIteraciones.getModel();
        double[][] matrizA = new double[valor][valor];
        double[] vectorI = new double[valor];
        modelo.setRowCount(0);
        
        for (int i = 0; i < valor; i++) {
            for (int j = 0; j < valor; j++) {
                matrizA[i][j] = Double.parseDouble(this.tblSeidelE.getValueAt(i, j).toString());
            }
            vectorI[i] = Double.parseDouble(this.tblSeidelB.getValueAt(i, 0).toString());
        }
        int n = vectorI.length;
        double[] x = new double[n];
        for (int i = 0; i < n; i++) {
            x[i] = 0;
        }
        double[] error_eval = new double[n];
        for (int i = 0; i < n; i++) {
            error_eval[i] = 1;
        }

        for (int i = 0; i < n; i++) {
            double sum = 0;
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    sum += Math.abs(matrizA[i][j]);
                }
            }
            double check = Math.abs(matrizA[i][i]) - sum;
            if (check < 0) {
                JOptionPane.showMessageDialog(null, "La matriz no es diagonalmente dominante", "Warning", JOptionPane.WARNING_MESSAGE);
                break;
            }
        }

        int iteracion = 0;
        double max = error_eval[0];
        for (int i = 0; i < error_eval.length; i++) {
            if (error_eval[i] > max) {
                max = error_eval[i];
            }
        }
        double[] z = new double[n];
        for (int i = 0; i < n; i++) {
            z[i] = 0;
        }

        while (max > 0.001) {
            iteracion = iteracion + 1;
            for (int i = 0; i < n; i++) {
                double sum = 0;
                double[] vectorForSum = new double[valor];
                for (int j = 0; j < valor; j++) {
                    vectorForSum[j] = 0;
                }
                double[] Xtemp = x;
                for (int j = 0; j < n; j++) {
                    if (i != j) {
                        vectorForSum[j] = matrizA[i][j] * Xtemp[j];
                    }
                }
                for (int u = 0; u < vectorForSum.length; u++) {
                    sum += vectorForSum[u];
                }
                x[i] = (vectorI[i] - sum) / matrizA[i][i];
            }
            for (int u = 0; u < error_eval.length; u++) {
                error_eval[u] = Math.sqrt(Math.pow((x[u] - z[u]), 2));
            }
            max = error_eval[0];
            for (int i = 0; i < error_eval.length; i++) {
                if (error_eval[i] > max) {
                    max = error_eval[i];
                }
            }
            for (int i = 0; i < n; i++) {
                z[i] = x[i];
            }
            if (valor == 3) {
                modelo.addRow(new Object[]{iteracion, x[0], x[1], x[2]});

            } else {
                modelo.addRow(new Object[]{iteracion, x[0], x[1]});

            }
        }
    }//GEN-LAST:event_btnRealizarSeidelActionPerformed

    private void pnlSeidelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlSeidelComponentShown
        int valor = Integer.parseInt(this.cbxSeidelCE.getSelectedItem().toString());
        DefaultTableModel modelo = (DefaultTableModel) this.tblSeidelE.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblSeidelE.setModel(modelo);
        modelo = (DefaultTableModel) this.tblSeidelB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblSeidelB.setModel(modelo);
        for (int i = 0; i < this.tblSeidelE.getRowCount(); i++) {
            for (int j = 0; j < this.tblSeidelE.getColumnCount(); j++) {
                this.tblSeidelE.setValueAt(0, i, j);
            }
        }
        modelo = (DefaultTableModel) this.tblEcuacionesSeidel.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblEcuacionesSeidel.setModel(modelo);

        modelo = (DefaultTableModel) this.tblIteraciones.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        modelo.addColumn("Iteración");
        for (int i = 0; i < valor; i++) {
            int letra = i + 120;
            modelo.addColumn((char) letra);
        }
        this.tblIteraciones.setModel(modelo);
    }//GEN-LAST:event_pnlSeidelComponentShown

    public void hacerMatriz(JTable tablaEntrada, JTable tablaObjetivoMatriz, JTable tablaObjetivoVector, JComboBox combo) {
        String[] cadenaPositiva;
        String[] sobrante;
        int cantidad = Integer.parseInt(combo.getSelectedItem().toString());
        double enteros[][];
        double vector[];
        enteros = new double[cantidad][cantidad];
        vector = new double[cantidad];
        cadenaPositiva = new String[cantidad];
        for (int h = 0; h < cantidad; h++) {
            sobrante = tablaEntrada.getValueAt(h, 0).toString().split("=");
            sobrante[1] = sobrante[1].trim();
            vector[h] = Double.parseDouble(sobrante[1]);
            if (tablaEntrada.getValueAt(h, 0).toString().charAt(0) == '-') {
                cadenaPositiva[0] = sobrante[0].replace("-", "+-").replace('+', 't').split("t")[1];
                sobrante[0] = sobrante[0].replace(cadenaPositiva[0], "");
                for (int i = 1; i < cadenaPositiva.length; i++) {
                    cadenaPositiva[i] = sobrante[0].replace("-", "+-").replace('+', 't').split("t")[i];
                }
            } else {
                cadenaPositiva = sobrante[0].replace("-", "+-").replace('+', 't').split("t");
            }
            for (int i = 0; i < cadenaPositiva.length; i++) {
                cadenaPositiva[i] = cadenaPositiva[i].trim();
                cadenaPositiva[i] = cadenaPositiva[i].replaceAll("[a-z]|[A-Z]", "#1");
            }
            for (int i = 0; i < cadenaPositiva.length; i++) {
                if (cadenaPositiva[i].charAt(0) == '-' && cadenaPositiva[i].charAt(1) == '#') {
                    cadenaPositiva[i] = cadenaPositiva[i].replace("-", "-1");
                }
                if (cadenaPositiva[i].charAt(0) == '#') {
                    cadenaPositiva[i] = cadenaPositiva[i].replace("#", "1#");
                }

            }
            for (int i = 0; i < cantidad; i++) {
                double a, b;
                a = Double.parseDouble(cadenaPositiva[i].split("#")[0]);
                if (cadenaPositiva[i].split("#").length > 1) {
                    b = Double.parseDouble(cadenaPositiva[i].split("#")[1]);
                } else {
                    b = 0;
                }
                enteros[h][i] = a * b;
            }
        }
        for (int i = 0; i < cantidad; i++) {
            for (int j = 0; j < cantidad; j++) {
                tablaObjetivoMatriz.setValueAt(enteros[i][j], i, j);
            }
        }
        for (int i = 0; i < cantidad; i++) {
            tablaObjetivoVector.setValueAt(vector[i], i, 0);
        }
    }

    public void llenarMatriz(double[][] matriz, int n, JTable tablaM, JTable tablaV) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= n; j++) {
                if (j == n) {
                    matriz[i][j] = Double.parseDouble(tablaV.getValueAt(i, 0).toString());
                } else {
                    matriz[i][j] = Double.parseDouble(tablaM.getValueAt(i, j).toString());
                }
            }
        }
    }

    public int reducirMatriz(double[][] matriz, int n) {
        int c = 0, flag = 0;
        for (int i = 0; i < n; i++) {
            if (matriz[i][i] == 0) {
                while (matriz[i + c][i] == 0 && (i + c) < n) {
                    c++;
                    if ((i + c) == n) {
                        flag = 1;
                        break;
                    }
                    for (int j = i, k = 0; k <= n; k++) {
                        double temp = matriz[j][k];
                        matriz[j][k] = matriz[j + c][k];
                        matriz[j + c][k] = temp;
                    }
                }
            }
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    double pro = matriz[j][i] / matriz[i][i];
                    for (int k = 0; k <= n; k++) {
                        matriz[j][k] = matriz[j][k] - (matriz[i][k] * pro);
                    }
                }
            }
        }
        return flag;
    }

    public int consistencia(double[][] matriz, int n, int flag) {
        double suma = 0;
        flag = 3;
        for (int i = 0; i < n; i++) {
            suma = 0;
            for (int j = 0; j < n; j++) {
                suma += matriz[i][j];
                if (suma == matriz[i][j]) {
                    flag = 2;
                }
            }

        }
        return flag;
    }

    public void imprimirMatriz(double[][] matriz, int n, int flag, JTable tablaResultado, JTable tblMatriz) {
        if (flag == 2) {
            JOptionPane.showMessageDialog(this.tblJordanR, "La matriz tiene soluciones multiples", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        } else if (flag == 3) {
            JOptionPane.showMessageDialog(this.tblJordanR, "La matriz no tiene solución", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (int i = 0; i < n; i++) {
                tablaResultado.setValueAt(matriz[i][n] / matriz[i][i], 0, i);
            }
            for (int i = 0; i < n; i++) {
                for (int j = 0; j <= n; j++) {
                    tblMatriz.setValueAt(matriz[i][j], i, j);
                }
            }
        }
    }

    public void llenarMatrizInversa(double[][] matriz, int n, JTable tablaM) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n + n; j++) {
                if (j >= n) {
                    matriz[i][j] = 0;
                } else {
                    matriz[i][j] = Double.parseDouble(tablaM.getValueAt(i, j).toString());
                }
            }
        }
        for (int i = 0; i < n; i++) {
            matriz[i][i + n] = 1;
        }
    }

    public int reducirInversa(double[][] matriz, int n) {
        int c = 0, flag = 0;
        for (int i = 0; i < n; i++) {
            if (matriz[i][i] == 0) {
                while (matriz[i + c][i] == 0 && (i + c) < n + n) {
                    c++;
                    if ((i + c) == n) {
                        flag = 1;
                        break;
                    }
                    for (int j = i, k = 0; k < n + n; k++) {
                        double temp = matriz[j][k];
                        matriz[j][k] = matriz[j + c][k];
                        matriz[j + c][k] = temp;
                    }
                }
            }
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    double pro = matriz[j][i] / matriz[i][i];
                    for (int k = 0; k < n + n; k++) {
                        matriz[j][k] = matriz[j][k] - (matriz[i][k] * pro);
                    }
                }
            }
        }
        return flag;
    }

    public void imprimirMatrizInversa(double[][] matriz, int n, int flag, JTable tablaResultado, JTable tblMatriz, JTable tblInversa) {
        double[][] matrizB = new double[1][n];
        double[][] matrizInversa = new double[n][n];
        double[][] matrizResultado = new double[1][n];
        if (flag == 2) {
            JOptionPane.showMessageDialog(this.tblInversaR, "La matriz tiene soluciones multiples", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        } else if (flag == 3) {
            JOptionPane.showMessageDialog(this.tblInversaR, "La matriz no tiene solución", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n + n; j++) {
                    if (j >= n) {
                        tblInversa.setValueAt(matrizInversa[i][j - n] = matriz[i][j] / matriz[i][i], i, j - n);
                    } else {
                        tblMatriz.setValueAt(matriz[i][j], i, j);
                    }
                }
            }
            for (int i = 0; i < n; i++) {
                matrizB[0][i] = Double.parseDouble(this.tblInversaB.getValueAt(i, 0).toString());
            }
            for (int i = 0; i < 1; i++) {
                for (int j = 0; j < n; j++) {
                    matrizResultado[i][j] = 0;
                    for (int k = 0; k < n; k++) {
                        matrizResultado[i][j] += matrizB[i][k] * matrizInversa[k][j];
                    }
                }
            }
            for (int i = 0; i < 1; i++) {
                for (int j = 0; j < n; j++) {
                    tablaResultado.setValueAt(matrizResultado[i][j], i, j);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBusquedaMin;
    private javax.swing.JButton btnComprobacionEliGaus;
    private javax.swing.JButton btnComprobacionInversa;
    private javax.swing.JButton btnComprobacionJordan;
    private javax.swing.JButton btnComprobacionSeidel;
    private javax.swing.JButton btnLlenarMin;
    private javax.swing.JButton btnMultiplicacion;
    private javax.swing.JButton btnOperacionMin;
    private javax.swing.JButton btnRealizarEliGaus;
    private javax.swing.JButton btnRealizarInversa;
    private javax.swing.JButton btnRealizarJordan;
    private javax.swing.JButton btnRealizarSeidel;
    private javax.swing.JComboBox<String> cbxC1;
    private javax.swing.JComboBox<String> cbxC2;
    private javax.swing.JComboBox<String> cbxEliNE;
    private javax.swing.JComboBox<String> cbxF1;
    private javax.swing.JComboBox<String> cbxF2;
    private javax.swing.JComboBox<String> cbxInversaCE;
    private javax.swing.JComboBox<String> cbxJordCE;
    private javax.swing.JComboBox<String> cbxSeidelCE;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel lblBMin;
    private javax.swing.JLabel lblMMin;
    private javax.swing.JPanel pnlEliGauss;
    private javax.swing.JPanel pnlInversa;
    private javax.swing.JPanel pnlJordan;
    private javax.swing.JPanel pnlMinimosCuadrados;
    private javax.swing.JPanel pnlMultiplicacion;
    private javax.swing.JPanel pnlSecante;
    private javax.swing.JPanel pnlSeidel;
    private javax.swing.JTable tblEcuaciones;
    private javax.swing.JTable tblEcuacionesInversa;
    private javax.swing.JTable tblEcuacionesJordan;
    private javax.swing.JTable tblEcuacionesSeidel;
    private javax.swing.JTable tblEliB;
    private javax.swing.JTable tblEliE;
    private javax.swing.JTable tblInversaB;
    private javax.swing.JTable tblInversaE;
    private javax.swing.JTable tblInversaR;
    private javax.swing.JTable tblInversaR2;
    private javax.swing.JTable tblIteraciones;
    private javax.swing.JTable tblJordanB;
    private javax.swing.JTable tblJordanE;
    private javax.swing.JTable tblJordanR;
    private javax.swing.JTable tblMA;
    private javax.swing.JTable tblMB;
    private javax.swing.JTable tblMC;
    private javax.swing.JTable tblMinimos;
    private javax.swing.JTable tblResultados;
    private javax.swing.JTable tblResultadosInversa;
    private javax.swing.JTable tblResultadosJordan;
    private javax.swing.JTable tblSeidelB;
    private javax.swing.JTable tblSeidelE;
    private javax.swing.JTextField txtC1Min;
    private javax.swing.JTextField txtC1Min1;
    private javax.swing.JTextField txtFilasMin;
    private javax.swing.JTextField txtValorBusqueda;
    // End of variables declaration//GEN-END:variables
}
