/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author leteo
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    JPanel[] paneles;
    int[][] aMult;
    int[][] bMult;
    int[][] cMult;

    public Principal() {
        initComponents();
        this.setLocationRelativeTo(null);
        paneles = new JPanel[this.jPanel1.getComponentCount() - 2];
        for (int i = 0; i < paneles.length; i++) {
            paneles[i] = (JPanel) this.jPanel1.getComponent(i + 2);
        }
        for (int i = 0; i < paneles.length; i++) {
            if (i != this.jList1.getSelectedIndex()) {
                this.paneles[i].setVisible(false);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        pnlMultiplicacion = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cbxF1 = new javax.swing.JComboBox<>();
        cbxC1 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMA = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cbxF2 = new javax.swing.JComboBox<>();
        cbxC2 = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblMB = new javax.swing.JTable();
        btnMultiplicacion = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblMC = new javax.swing.JTable();
        pnlEliGauss = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        cbxEliNE = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblEliE = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblEliB = new javax.swing.JTable();
        btnComprobacionEliGaus = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblEcuaciones = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        btnRealizarEliGaus = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblResultados = new javax.swing.JTable();
        pnlJordan = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        pnlInversa = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        pnlSeidel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1040, 630));

        jPanel1.setBackground(new java.awt.Color(37, 45, 68));
        jPanel1.setPreferredSize(new java.awt.Dimension(1028, 600));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(254, 254, 254));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Calculadora de metodos numericos computacionales");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 21, 1000, -1));

        jList1.setBackground(new java.awt.Color(37, 45, 68));
        jList1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jList1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jList1.setForeground(new java.awt.Color(254, 254, 254));
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Multiplicación de matrices", "Eliminación de Gauss", "Gauss Jordan", "Matriz inversa", "Gauss Seidel" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 77, 256, 511));

        pnlMultiplicacion.setBackground(new java.awt.Color(37, 45, 68));
        pnlMultiplicacion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMultiplicacion.setPreferredSize(new java.awt.Dimension(738, 511));
        pnlMultiplicacion.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlMultiplicacionComponentShown(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(254, 254, 254));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Multiplicación de matrices");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Seleccione dimesiones de la primer matriz:");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Seleccione dimesiones de la segunda matriz:");

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Filas:");

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Columnas:");

        cbxF1.setBackground(new java.awt.Color(37, 45, 68));
        cbxF1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cbxF1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        cbxF1.setPreferredSize(new java.awt.Dimension(67, 25));
        cbxF1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxF1ItemStateChanged(evt);
            }
        });

        cbxC1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cbxC1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        cbxC1.setPreferredSize(new java.awt.Dimension(67, 25));
        cbxC1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxC1ItemStateChanged(evt);
            }
        });

        tblMA.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tblMA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblMA.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblMA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblMAKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(tblMA);

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Columnas:");

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Filas:");

        cbxF2.setBackground(new java.awt.Color(37, 45, 68));
        cbxF2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cbxF2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        cbxF2.setPreferredSize(new java.awt.Dimension(67, 25));
        cbxF2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxF2ItemStateChanged(evt);
            }
        });

        cbxC2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cbxC2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        cbxC2.setPreferredSize(new java.awt.Dimension(67, 25));
        cbxC2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxC2ItemStateChanged(evt);
            }
        });

        tblMB.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tblMB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblMB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblMB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblMBKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(tblMB);

        btnMultiplicacion.setText("Realizar operación");
        btnMultiplicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultiplicacionActionPerformed(evt);
            }
        });

        tblMC.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tblMC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblMC.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(tblMC);

        javax.swing.GroupLayout pnlMultiplicacionLayout = new javax.swing.GroupLayout(pnlMultiplicacion);
        pnlMultiplicacion.setLayout(pnlMultiplicacionLayout);
        pnlMultiplicacionLayout.setHorizontalGroup(
            pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                        .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(cbxF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbxC1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(btnMultiplicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMultiplicacionLayout.createSequentialGroup()
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11)))
                    .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                        .addComponent(cbxF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149)
                        .addComponent(cbxC2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMultiplicacionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(244, 244, 244))
        );
        pnlMultiplicacionLayout.setVerticalGroup(
            pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxC1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxC2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMultiplicacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlMultiplicacionLayout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(btnMultiplicacion)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(pnlMultiplicacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        pnlEliGauss.setBackground(new java.awt.Color(37, 45, 68));
        pnlEliGauss.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlEliGauss.setPreferredSize(new java.awt.Dimension(738, 511));
        pnlEliGauss.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlEliGaussComponentShown(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(254, 254, 254));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Eliminación de Gauss");

        jLabel13.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Cantidad de ecuaciones:");

        cbxEliNE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3" }));
        cbxEliNE.setPreferredSize(new java.awt.Dimension(208, 20));
        cbxEliNE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxEliNEItemStateChanged(evt);
            }
        });

        tblEliE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(tblEliE);

        tblEliB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblEliB);

        btnComprobacionEliGaus.setText("Comprobar ecuaciones");
        btnComprobacionEliGaus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprobacionEliGausActionPerformed(evt);
            }
        });

        tblEcuaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ecuaciones"
            }
        ));
        jScrollPane8.setViewportView(tblEcuaciones);

        jLabel14.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Matriz resultante:");

        jLabel15.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Favor de escribir los 0");

        btnRealizarEliGaus.setText("Realizar operación");
        btnRealizarEliGaus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarEliGausActionPerformed(evt);
            }
        });

        tblResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "x"
            }
        ));
        jScrollPane7.setViewportView(tblResultados);

        javax.swing.GroupLayout pnlEliGaussLayout = new javax.swing.GroupLayout(pnlEliGauss);
        pnlEliGauss.setLayout(pnlEliGaussLayout);
        pnlEliGaussLayout.setHorizontalGroup(
            pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEliGaussLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlEliGaussLayout.createSequentialGroup()
                        .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxEliNE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlEliGaussLayout.createSequentialGroup()
                        .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEliGaussLayout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(260, 260, 260))
                            .addGroup(pnlEliGaussLayout.createSequentialGroup()
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                                .addComponent(btnComprobacionEliGaus)
                                .addGap(54, 54, 54)))
                        .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRealizarEliGaus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(pnlEliGaussLayout.createSequentialGroup()
                .addGap(205, 205, 205)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlEliGaussLayout.setVerticalGroup(
            pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEliGaussLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxEliNE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlEliGaussLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEliGaussLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEliGaussLayout.createSequentialGroup()
                                .addComponent(btnComprobacionEliGaus)
                                .addGap(42, 42, 42))))
                    .addGroup(pnlEliGaussLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnRealizarEliGaus)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(354, Short.MAX_VALUE))
        );

        jPanel1.add(pnlEliGauss, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        pnlJordan.setBackground(new java.awt.Color(37, 45, 68));
        pnlJordan.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlJordan.setPreferredSize(new java.awt.Dimension(738, 511));

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Gauss Jordan");
        jLabel6.setToolTipText("");

        javax.swing.GroupLayout pnlJordanLayout = new javax.swing.GroupLayout(pnlJordan);
        pnlJordan.setLayout(pnlJordanLayout);
        pnlJordanLayout.setHorizontalGroup(
            pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
        );
        pnlJordanLayout.setVerticalGroup(
            pnlJordanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlJordanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(464, Short.MAX_VALUE))
        );

        jPanel1.add(pnlJordan, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        pnlInversa.setBackground(new java.awt.Color(37, 45, 68));
        pnlInversa.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlInversa.setPreferredSize(new java.awt.Dimension(738, 511));

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Método de matriz inversa");

        javax.swing.GroupLayout pnlInversaLayout = new javax.swing.GroupLayout(pnlInversa);
        pnlInversa.setLayout(pnlInversaLayout);
        pnlInversaLayout.setHorizontalGroup(
            pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
        );
        pnlInversaLayout.setVerticalGroup(
            pnlInversaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInversaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap(464, Short.MAX_VALUE))
        );

        jPanel1.add(pnlInversa, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        pnlSeidel.setBackground(new java.awt.Color(37, 45, 68));
        pnlSeidel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlSeidel.setPreferredSize(new java.awt.Dimension(738, 511));

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Gauss Seidel");

        javax.swing.GroupLayout pnlSeidelLayout = new javax.swing.GroupLayout(pnlSeidel);
        pnlSeidel.setLayout(pnlSeidelLayout);
        pnlSeidelLayout.setHorizontalGroup(
            pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
        );
        pnlSeidelLayout.setVerticalGroup(
            pnlSeidelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSeidelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addContainerGap(464, Short.MAX_VALUE))
        );

        jPanel1.add(pnlSeidel, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 77, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if (this.jList1.getSelectedIndex() >= 0 && this.jList1.getSelectedIndex() < paneles.length) {
            for (int i = 0; i < paneles.length; i++) {
                if (i != this.jList1.getSelectedIndex()) {
                    this.paneles[i].setVisible(false);
                }
            }
            paneles[this.jList1.getSelectedIndex()].setVisible(true);
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void cbxF1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxF1ItemStateChanged
        DefaultTableModel modelo = (DefaultTableModel) this.tblMA.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblMA.setModel(modelo);
        DefaultTableModel modelo3 = (DefaultTableModel) this.tblMC.getModel();

        modelo3.setColumnCount(0);
        modelo3.setRowCount(0);

        if (Integer.parseInt(cbxC1.getSelectedItem().toString()) == Integer.parseInt(cbxF2.getSelectedItem().toString())) {
            for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
                modelo3.addRow(new Object[]{0});
            }
            for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
                modelo3.addColumn("");
            }
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(true);
        } else {
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(false);
        }
        for (int i = 0; i < this.tblMA.getRowCount(); i++) {
            for (int j = 0; j < this.tblMA.getColumnCount(); j++) {
                tblMA.setValueAt(0, i, j);
            }
        }
    }//GEN-LAST:event_cbxF1ItemStateChanged

    private void pnlMultiplicacionComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlMultiplicacionComponentShown
        DefaultTableModel modelo1 = (DefaultTableModel) this.tblMA.getModel();
        modelo1.setRowCount(0);
        modelo1.setColumnCount(0);
        for (int i = 0; i <= this.cbxC1.getSelectedIndex(); i++) {
            modelo1.addColumn("");
        }
        for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
            modelo1.addRow(new Object[]{});
        }
        this.tblMA.setModel(modelo1);
        DefaultTableModel modelo2 = (DefaultTableModel) this.tblMB.getModel();
        modelo2.setRowCount(0);
        modelo2.setColumnCount(0);
        for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
            modelo2.addColumn("");
        }
        for (int i = 0; i <= this.cbxF2.getSelectedIndex(); i++) {
            modelo2.addRow(new Object[]{});
        }
        this.tblMB.setModel(modelo2);

        DefaultTableModel modelo3 = (DefaultTableModel) this.tblMC.getModel();

        modelo3.setColumnCount(0);
        modelo3.setRowCount(0);

        if (Integer.parseInt(cbxC1.getSelectedItem().toString()) == Integer.parseInt(cbxF2.getSelectedItem().toString())) {
            for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
                modelo3.addRow(new Object[]{});
            }
            for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
                modelo3.addColumn("");
            }
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(true);
        } else {
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(false);
        }
        for (int i = 0; i < this.tblMA.getRowCount(); i++) {
            for (int j = 0; j < this.tblMA.getColumnCount(); j++) {
                tblMA.setValueAt(0, i, j);
            }
        }
        for (int i = 0; i < this.tblMB.getRowCount(); i++) {
            for (int j = 0; j < this.tblMB.getColumnCount(); j++) {
                tblMB.setValueAt(0, i, j);
            }
        }
    }//GEN-LAST:event_pnlMultiplicacionComponentShown

    private void cbxC1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxC1ItemStateChanged
        DefaultTableModel modelo = (DefaultTableModel) this.tblMA.getModel();
        modelo.setColumnCount(0);
        for (int i = 0; i <= this.cbxC1.getSelectedIndex(); i++) {
            modelo.addColumn("");
        }
        this.tblMA.setModel(modelo);

        DefaultTableModel modelo3 = (DefaultTableModel) this.tblMC.getModel();

        modelo3.setColumnCount(0);
        modelo3.setRowCount(0);

        if (Integer.parseInt(cbxC1.getSelectedItem().toString()) == Integer.parseInt(cbxF2.getSelectedItem().toString())) {
            for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
                modelo3.addRow(new Object[]{});
            }
            for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
                modelo3.addColumn("");
            }
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(true);
        } else {
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(false);
        }
        for (int i = 0; i < this.tblMA.getRowCount(); i++) {
            for (int j = 0; j < this.tblMA.getColumnCount(); j++) {
                tblMA.setValueAt(0, i, j);
            }
        }
    }//GEN-LAST:event_cbxC1ItemStateChanged

    private void cbxF2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxF2ItemStateChanged
        DefaultTableModel modelo = (DefaultTableModel) this.tblMB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i <= this.cbxF2.getSelectedIndex(); i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblMB.setModel(modelo);

        DefaultTableModel modelo3 = (DefaultTableModel) this.tblMC.getModel();

        modelo3.setColumnCount(0);
        modelo3.setRowCount(0);

        if (Integer.parseInt(cbxC1.getSelectedItem().toString()) == Integer.parseInt(cbxF2.getSelectedItem().toString())) {
            for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
                modelo3.addRow(new Object[]{});
            }
            for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
                modelo3.addColumn("");
            }
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(true);
        } else {
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(false);
        }
        for (int i = 0; i < this.tblMB.getRowCount(); i++) {
            for (int j = 0; j < this.tblMB.getColumnCount(); j++) {
                tblMB.setValueAt(0, i, j);
            }
        }
    }//GEN-LAST:event_cbxF2ItemStateChanged

    private void cbxC2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxC2ItemStateChanged
        DefaultTableModel modelo = (DefaultTableModel) this.tblMB.getModel();
        modelo.setColumnCount(0);
        for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
            modelo.addColumn("");
        }
        this.tblMB.setModel(modelo);

        DefaultTableModel modelo3 = (DefaultTableModel) this.tblMC.getModel();

        modelo3.setColumnCount(0);
        modelo3.setRowCount(0);

        if (Integer.parseInt(cbxC1.getSelectedItem().toString()) == Integer.parseInt(cbxF2.getSelectedItem().toString())) {
            for (int i = 0; i <= this.cbxF1.getSelectedIndex(); i++) {
                modelo3.addRow(new Object[]{});
            }
            for (int i = 0; i <= this.cbxC2.getSelectedIndex(); i++) {
                modelo3.addColumn("");
            }
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(true);
        } else {
            this.tblMC.setModel(modelo3);
            this.btnMultiplicacion.setEnabled(false);
        }
        for (int i = 0; i < this.tblMB.getRowCount(); i++) {
            for (int j = 0; j < this.tblMB.getColumnCount(); j++) {
                tblMB.setValueAt(0, i, j);
            }
        }
    }//GEN-LAST:event_cbxC2ItemStateChanged

    private void btnMultiplicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultiplicacionActionPerformed
        if (!(this.tblMA.isEditing() || this.tblMB.isEditing())) {
            this.aMult = new int[this.cbxF1.getSelectedIndex() + 1][this.cbxC1.getSelectedIndex() + 1];
            this.bMult = new int[this.cbxF2.getSelectedIndex() + 1][this.cbxC2.getSelectedIndex() + 1];
            this.cMult = new int[this.cbxF1.getSelectedIndex() + 1][this.cbxC2.getSelectedIndex() + 1];
            for (int i = 0; i < this.cbxF1.getSelectedIndex() + 1; i++) {
                for (int j = 0; j < this.cbxC1.getSelectedIndex() + 1; j++) {
                    this.aMult[i][j] = Integer.parseInt(this.tblMA.getValueAt(i, j).toString());
                }
            }
            for (int i = 0; i < this.cbxF2.getSelectedIndex() + 1; i++) {
                for (int j = 0; j < this.cbxC2.getSelectedIndex() + 1; j++) {
                    this.bMult[i][j] = Integer.parseInt(this.tblMB.getValueAt(i, j).toString());
                }
            }
            for (int i = 0; i < this.cbxF1.getSelectedIndex() + 1; i++) {
                for (int j = 0; j < this.cbxC2.getSelectedIndex() + 1; j++) {
                    cMult[i][j] = 0;
                    for (int k = 0; k < this.cbxC1.getSelectedIndex() + 1; k++) {
                        cMult[i][j] += aMult[i][k] * bMult[k][j];
                    }
                }
            }
            for (int i = 0; i < this.cbxF1.getSelectedIndex() + 1; i++) {
                for (int j = 0; j < this.cbxC2.getSelectedIndex() + 1; j++) {
                    this.tblMC.setValueAt(cMult[i][j], i, j);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Está siendo editada la tabla, por favor presione enter", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnMultiplicacionActionPerformed

    private void tblMAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblMAKeyTyped
        if (this.tblMA.isEditing() || this.tblMB.isEditing()) {
            this.btnMultiplicacion.setEnabled(false);
        } else {
            this.btnMultiplicacion.setEnabled(true);
        }
    }//GEN-LAST:event_tblMAKeyTyped

    private void tblMBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblMBKeyTyped
        if (this.tblMA.isEditing() || this.tblMB.isEditing()) {
            this.btnMultiplicacion.setEnabled(false);
        } else {
            this.btnMultiplicacion.setEnabled(true);
        }
    }//GEN-LAST:event_tblMBKeyTyped

    private void pnlEliGaussComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlEliGaussComponentShown
        int valor = Integer.parseInt(this.cbxEliNE.getSelectedItem().toString());
        DefaultTableModel modelo = (DefaultTableModel) this.tblEliE.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblEliE.setModel(modelo);
        modelo = (DefaultTableModel) this.tblEliB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        for (int i = 0; i < this.tblEliE.getRowCount(); i++) {
            for (int j = 0; j < this.tblEliE.getColumnCount(); j++) {
                this.tblEliE.setValueAt(0, i, j);
            }
        }
        modelo = (DefaultTableModel) this.tblEcuaciones.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblEcuaciones.setModel(modelo);
        
        modelo = (DefaultTableModel) this.tblResultados.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        for (int i = 0; i < valor; i++) {
            int letra = i+120;
            modelo.addColumn((char)letra);
        }
        modelo.addColumn("Determinante");
        modelo.addRow(new Object[]{});
        this.tblResultados.setModel(modelo);
        
    }//GEN-LAST:event_pnlEliGaussComponentShown

    private void cbxEliNEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxEliNEItemStateChanged
        int valor = Integer.parseInt(this.cbxEliNE.getSelectedItem().toString());
        DefaultTableModel modelo = (DefaultTableModel) this.tblEliE.getModel();
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            int caracter = i + 120;
            modelo.addColumn((char) caracter);
        }
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{});
        }
        this.tblEliE.setModel(modelo);
        modelo = (DefaultTableModel) this.tblEliB.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        for (int i = 0; i < this.tblEliE.getRowCount(); i++) {
            for (int j = 0; j < this.tblEliE.getColumnCount(); j++) {
                this.tblEliE.setValueAt(0, i, j);
            }
        }
        modelo = (DefaultTableModel) this.tblEcuaciones.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < valor; i++) {
            modelo.addRow(new Object[]{0});
        }
        this.tblEcuaciones.setModel(modelo);
        
        modelo = (DefaultTableModel) this.tblResultados.getModel();
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        for (int i = 0; i < valor; i++) {
            int letra = i+120;
            modelo.addColumn((char)letra);
        }
        modelo.addColumn("Determinante");
        modelo.addRow(new Object[]{});
        this.tblResultados.setModel(modelo);
    }//GEN-LAST:event_cbxEliNEItemStateChanged

    private void btnComprobacionEliGausActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprobacionEliGausActionPerformed
        if (this.tblEcuaciones.isEditing()) {
            JOptionPane.showMessageDialog(this.btnComprobacionEliGaus, "Está siendo editada la tabla de las ecuaciones", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            hacerMatriz(this.tblEcuaciones, this.tblEliE, this.tblEliB);
        }
    }//GEN-LAST:event_btnComprobacionEliGausActionPerformed

    private void btnRealizarEliGausActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarEliGausActionPerformed
        int valor =  Integer.parseInt(this.cbxEliNE.getSelectedItem().toString());
        int n = valor - 1;
        double [][] a = new double[valor][valor];
        double [] b = new double[valor];
        double [] x = new double[n + 1];
        for (int i = 0; i < valor; i++) {
            for (int j = 0; j < valor; j++) {
                a[i][j] = Double.parseDouble(this.tblEliE.getValueAt(i, j).toString());
            }
        }
        for (int i = 0; i < valor; i++) {
            b[i] = Double.parseDouble(this.tblEliB.getValueAt(i, 0).toString());
        }
        int det = 1;
        for (int i = 0; i <= n - 1; i++) {
            det *= a[i][i];
            if (det == 0) {
                JOptionPane.showMessageDialog(this.tblResultados, "Hay un cero en la diagonal", "Resultado", JOptionPane.INFORMATION_MESSAGE);
            }else{
                for (int k = i + 1; k <= n; k++) {
                    for (int j = i + 1; j <= n; j++) {
                        a[k][j] = a[k][j] - a[k][i] * a[i][j]/a[i][i];
                    }
                    b[k] = b[k] - a[k][i] * b[i]/a[i][i];
                }
            }
        }
        det *= a[n][n];
        if (det == 0) {
            JOptionPane.showMessageDialog(this.tblResultados, "Hay un cero en la diagonal", "Resultado", JOptionPane.INFORMATION_MESSAGE);
        }else{
            x[n] = b[n]/a[n][n];
            for (int i = n-1; i >= 0; i--) {
                x[i] = b[i];
                for (int j = i + 1; j <= n; j++) {
                    x[i] -= a[i][j]*x[j];
                }
                x[i] /= a[i][i]; 
            }
        }
        for (int i = 0; i < x.length; i++) {
            this.tblResultados.setValueAt(x[i], 0, i);
        }
        this.tblResultados.setValueAt(det, 0, this.tblResultados.getColumnCount() - 1);
    }//GEN-LAST:event_btnRealizarEliGausActionPerformed

    public void hacerMatriz(JTable tablaEntrada, JTable tablaObjetivoMatriz, JTable tablaObjetivoVector) {
        String[] cadenaPositiva;
        String[] sobrante;
        int cantidad = Integer.parseInt(this.cbxEliNE.getSelectedItem().toString());
        double enteros[][];
        double vector[];
        enteros = new double[cantidad][cantidad];
        vector = new double[cantidad];
        cadenaPositiva = new String[cantidad];
        for (int h = 0; h < cantidad; h++) {
            sobrante = tablaEntrada.getValueAt(h, 0).toString().split("=");
            sobrante[1] = sobrante[1].trim();
            vector[h] = Double.parseDouble(sobrante[1]);
            if (tablaEntrada.getValueAt(h, 0).toString().charAt(0) == '-') {
                cadenaPositiva[0] = sobrante[0].replace("-", "+-").replace('+', 't').split("t")[1];
                sobrante[0] = sobrante[0].replace(cadenaPositiva[0], "");
                for (int i = 1; i < cadenaPositiva.length; i++) {
                    cadenaPositiva[i] = sobrante[0].replace("-", "+-").replace('+', 't').split("t")[i];
                }
            } else {
                cadenaPositiva = sobrante[0].replace("-", "+-").replace('+', 't').split("t");
            }
            for (int i = 0; i < cadenaPositiva.length; i++) {
                cadenaPositiva[i] = cadenaPositiva[i].trim();
                cadenaPositiva[i] = cadenaPositiva[i].replaceAll("[a-z]|[A-Z]", "#1");
            }
            for (int i = 0; i < cadenaPositiva.length; i++) {
                if (cadenaPositiva[i].charAt(0) == '-' && cadenaPositiva[i].charAt(1) == '#') {
                    cadenaPositiva[i] = cadenaPositiva[i].replace("-", "-1");
                }
                if (cadenaPositiva[i].charAt(0) == '#') {
                    cadenaPositiva[i] = cadenaPositiva[i].replace("#", "1#");
                }

            }
            for (int i = 0; i < cantidad; i++) {
                double a, b;
                a = Double.parseDouble(cadenaPositiva[i].split("#")[0]);
                if (cadenaPositiva[i].split("#").length > 1) {
                    b = Double.parseDouble(cadenaPositiva[i].split("#")[1]);
                } else {
                    b = 0;
                }
                enteros[h][i] = a * b;
            }
        }
        for (int i = 0; i < cantidad; i++) {
            for (int j = 0; j < cantidad; j++) {
                tablaObjetivoMatriz.setValueAt(enteros[i][j], i, j);
            }
        }
        for (int i = 0; i < cantidad; i++) {
            tablaObjetivoVector.setValueAt(vector[i], i, 0);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComprobacionEliGaus;
    private javax.swing.JButton btnMultiplicacion;
    private javax.swing.JButton btnRealizarEliGaus;
    private javax.swing.JComboBox<String> cbxC1;
    private javax.swing.JComboBox<String> cbxC2;
    private javax.swing.JComboBox<String> cbxEliNE;
    private javax.swing.JComboBox<String> cbxF1;
    private javax.swing.JComboBox<String> cbxF2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel pnlEliGauss;
    private javax.swing.JPanel pnlInversa;
    private javax.swing.JPanel pnlJordan;
    private javax.swing.JPanel pnlMultiplicacion;
    private javax.swing.JPanel pnlSeidel;
    private javax.swing.JTable tblEcuaciones;
    private javax.swing.JTable tblEliB;
    private javax.swing.JTable tblEliE;
    private javax.swing.JTable tblMA;
    private javax.swing.JTable tblMB;
    private javax.swing.JTable tblMC;
    private javax.swing.JTable tblResultados;
    // End of variables declaration//GEN-END:variables
}
